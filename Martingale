#include "Windows.h"
#include "stdio.h"
#include <iostream>
#include <stack>
#include <cmath>

const int RESET_X = 1010;
const int RESET_Y = 815;
const int SPIN_X = 850;
const int SPIN_Y = 815;
const int BET_RED_X = 900;
const int BET_RED_Y = 630;
const int BET_BLACK_X = 980;
const int BET_BLACK_Y = 685;
const int PFF_X = 850;
const int PFF_Y = 685;

std::stack<char> pastRolls;
int _y = 615;
int consecutive;

void Scan()
{
	bool iterator = true;
	HDC _hdc = GetDC(NULL);

	while (iterator)
	{
		for (int _x = 250; _x < 300; _x++) {
			COLORREF _color = GetPixel(_hdc, _x, _y);
			if (GetRValue(_color) > 200 && GetGValue(_color) < 60 && GetBValue(_color) < 60) {
				pastRolls.push('R');
				iterator = false;
				break;
			}
			else if (GetRValue(_color) > 160 && GetGValue(_color) > 160 && GetBValue(_color) < 70) {
				pastRolls.push('B');
				iterator = false;
				break;
			}
			else if (GetRValue(_color) < 70 && GetGValue(_color) > 200 && GetBValue(_color) < 70) {
				pastRolls.push('G');
				iterator = false;
				break;
			}
		}
	}
}

void Press(int x, int y)
{
	SetCursorPos(x, y);
	mouse_event(MOUSEEVENTF_LEFTDOWN, x, y, NULL, NULL);
	Sleep(10);
	mouse_event(MOUSEEVENTF_LEFTUP, x, y, NULL, NULL);
	Sleep(200);
}

void betRed(int times)
{
	for (int x = 0; x < times; x++)
	{
		Sleep(100);
		Press(BET_RED_X, BET_RED_Y);
		Sleep(100);
	}
}

void betBlack(int times)
{
	for (int x = 0; x < times; x++)
	{
		Sleep(100);
		Press(BET_BLACK_X, BET_BLACK_Y);
		Sleep(100);
	}
}

int GetConsecutive()
{
	std::stack<char> temp = pastRolls;
	int cCount = 1;

	while (temp.size() > 1)
	{
		char tempHolder = temp.top();
		temp.pop();
		if (tempHolder == temp.top())
		{
			cCount++;
		}
		else return cCount;
	}
	return pastRolls.size();
}

void Reset()
{
	Press(RESET_X, RESET_Y);
	Sleep(200);
}

void Bet(char color)
{
	if (color == 'R')
	{
		betRed(1);
		Sleep(250);
		betBlack(pow(2, GetConsecutive()));
	}
	else if (color == 'B')
	{
		betBlack(1);
		Sleep(250);
		betRed(pow(2, GetConsecutive()));
	}
}

void Spin()
{
	Press(SPIN_X, SPIN_Y);
}

void PlayingForFun()
{
	Press(PFF_X, PFF_Y);
}

int main(int argc, char** argv)
{
	Spin();
	Sleep(7000);
	while (true)
	{
		PlayingForFun();
		Scan();
		Sleep(1000);
		Bet(pastRolls.top());
		Sleep(1000);
		Spin();
		Sleep(10000);
		Reset();
	}
	return 0;
}
